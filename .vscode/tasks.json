{
	"version": "2.0.0",
	"options": {
		"env": {
			"ENV_FILE": "${workspaceFolder}/.env",
			"PATH": "${workspaceFolder}/scripts:${env:PATH}",
		},
	},
	"inputs": [
    {
      "type": "pickString",
      "id": "ivm_target",
      "description": "Which ivm target configuration?",
      "options": [
        "Debug",
        "Release",
        "RelWithDebInfo",
      ],
      "default": "Debug",
    },
    {
      "type": "pickString",
      "id": "v8_target",
      "description": "Which v8 target to build?",
      "options": [
        "arm64.debug",
        "arm64.optdebug",
        "arm64.release",
      ],
      "default": "arm64.optdebug",
    },
    {
      "type": "pickString",
      "id": "v8_version",
      "description": "Which v8 revision to checkout?",
      "options": [
        "12.8.20",
      ],
      "default": "component"
    },
    {
      "type": "pickString",
      "id": "nodejs_version",
      "description": "Which nodejs version to link against? For debug builds of isolated-vm the headers must match the nodejs version.",
      "options": [
        "18.0.0",
        "20.0.0",
        "22.0.0",
      ],
      "default": "22.0.0",
    },
	],
	"tasks": [
		{
			"label": "isolated-vm: build",
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"runOptions": {
				"runOn": "folderOpen",
			},
			"dependsOn": [ "tsc: watch", "ninja: build" ],
			"icon": { "id": "plug" },
		},
		{
			"label": "tsc: watch",
			"type": "shell",
			"command": "npx tsc --build --watch",
			"problemMatcher": "$tsc-watch",
			"isBackground": true,
			"presentation": {
				"panel": "dedicated",
				"reveal": "never",
			},
			"group": "build",
			"icon": { "id": "zap" },
		},
		{
			"label": "cmake: clean",
			"type": "shell",
			"command": "rm -rf build",
			"problemMatcher": [],
			"presentation": {
				"close": true,
				"reveal": "never",
			},
			"icon": { "id": "jersey" },
		},
		{
			"label": "cmake: configure",
			"type": "shell",
			"command": "set -eu; set -a; . $ENV_FILE; . $V8_OUT_PATH/env; cmake -DCMAKE_BUILD_TYPE=${input:ivm_target} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DIVM_HOST_PLATFORM=linux-gnu -DIVM_HOST_ARCH=\"$(uname -m)\" -DV8_INCLUDE_DIR=\"$V8_INCLUDE_DIR\" -DV8_INCLUDE_GN_FILE=\"$V8_INCLUDE_GN_FILE\" -DV8_OUT_PATH=\"$V8_OUT_PATH\" -DV8_LIBRARY_TYPE=\"$V8_LIBRARY_TYPE\" -DCMAKE_CXX_COMPILER=\"$(realpath \"$(which clang)\")\" -DNAPI_INCLUDE_DIR=$(node -p 'require(\"node-addon-api\").include_dir') -DNODE_DIST_DIR=\"$NODE_DIST_DIR\" -DCMAKE_BUILD_TYPE=${input:ivm_target} -G Ninja -B build",
			"dependsOn": [ "cmake: clean" ],
			"problemMatcher": [],
			"presentation": {
				"clear": true,
				"panel": "dedicated",
				"reveal": "silent",
				"showReuseMessage": false,
			},
			"icon": { "id": "wrench" },
		},
		{
			"label": "ninja: build",
			"type": "shell",
			"command": "ninja -C build ivm_backend_v8",
			"problemMatcher": "$gcc",
			"presentation": {
				"clear": true,
				"panel": "dedicated",
				"reveal": "never",
				"showReuseMessage": false,
			},
			"group": "build",
			"icon": { "id": "flame" },
		},
		{
			"label": "v8: select",
			"type": "shell",
			"command": "set -eu; export V8_REF=$(PATCH_DIR=${workspaceFolder}/patches v8_select ${input:v8_version}); ivm_write_env V8_REF",
			"options": { "cwd": "/v8" },
			"problemMatcher": [],
			"presentation": {
				"reveal": "silent",
			},
			"icon": { "id": "versions" },
		},
		{
			"label": "v8: build",
			"type": "shell",
			"command": "set -eu; set -a; . $ENV_FILE; export V8_OUT_PATH=$(pwd)/out/$V8_REF/${input:v8_target}; v8_build $V8_OUT_PATH; ivm_write_env V8_OUT_PATH",
			"options": { "cwd": "/v8" },
			"problemMatcher": [],
			"presentation": {
				"reveal": "always",
			},
			"icon": { "id": "library" },
		},
		{
			"label": "nodejs: select",
			"type": "shell",
			"command": "set -eu; export NODE_DIST_DIR=$(nodejs_select ~/local/nodejs/${input:nodejs_version}); ivm_write_env NODE_DIST_DIR",
			"options": { "cwd": "${userHome}" },
			"problemMatcher": [],
			"presentation": {
				"reveal": "silent",
			},
			"icon": { "id": "versions" },
		},
	],
}

#!/bin/bash
set -eu
OUTDIR=$(dirname "$1")
TARGET=$(basename "$1")

# Docs:
# https://v8.dev/docs/build-gn
# https://v8.dev/docs/compile-arm64#system_clang_gcc

# Note: libc++ is (basically) required to build v8 on clang. On clang `libstdc++` can't inline
# unaligned 64-bit atomic struct operations. So you'd need to link against libatomic which I don't
# want to do because you don't need to.
# ---
# #include <atomic>
# struct foo_t { uint32_t left, right; };
# int main() {
#   std::atomic<foo_t> foo;
#   foo_t one, two;
#   foo.compare_exchange_strong(one, two);
# }
# ---
# g++ a.cc
# clang++ -stdlib=libc++ a.cc
# clang++ -stdlib=libstdc++ a.cc
# /usr/bin/ld: /tmp/a-f7f4f4.o: in function `std::atomic<foo_t>::compare_exchange_strong(foo_t&, foo_t, std::memory_order, std::memory_order)':
# a.cc:(.text._ZNSt6atomicI5foo_tE23compare_exchange_strongERS0_S0_St12memory_orderS3_[_ZNSt6atomicI5foo_tE23compare_exchange_strongERS0_S0_St12memory_orderS3_]+0x6a): undefined reference to `__atomic_compare_exchange'
# clang++: error: linker command failed with exit code 1 (use -v to see invocation)

# shellcheck disable=SC2206
TUPLE=(${TARGET//./ })
PLATFORM=${TUPLE[${#TUPLE[@]} - 3]:-} # linux-gnu, linux-musl, windows, darwin
ARCH=${TUPLE[${#TUPLE[@]} - 2]} # x64, arm64
CONFIG=${TUPLE[${#TUPLE[@]} - 1]} # release, debug, optdebug

GN_ARGS=(
	clang_use_chrome_plugins=false
	treat_warnings_as_errors=false
	use_custom_libcxx=false
	v8_enable_backtrace=true
	v8_enable_sandbox=true
	v8_use_external_startup_data=false
);
if [ -z ${CLANG_BASE_PATH+-} ]; then
	# v8 drops support for gcc wow
	# https://groups.google.com/a/chromium.org/g/chromium-dev/c/5haWEDpUK6Y/m/LkM8f4CrDAAJ
	# https://groups.google.com/g/v8-users/c/-vbS2agi1Kw
	GN_ARGS+=(
		is_clang=false
	)
else
	GN_ARGS+=(clang_base_path="\"$CLANG_BASE_PATH\"")
fi

if [ "$PLATFORM" = linux-musl ]; then
	GN_ARGS+=(
		use_glib=false
		use_lld=false
		use_sysroot=false
	)
fi

case "$CONFIG" in
	debug|optdebug)
		GN_ARGS+=(
			is_debug=true
			v8_enable_fast_mksnapshot=true
		)
		V8_LIBRARY_TYPE=shared
		V8_TARGETS=(v8 v8_libbase v8_libplatform)
		;;
	release)
		GN_ARGS+=(
			dcheck_always_on=false
			is_component_build=false
			is_debug=false
			v8_enable_disassembler=true
			v8_enable_object_print=true
			v8_enable_verify_heap=true
			v8_monolithic=true
		)
		V8_LIBRARY_TYPE=static
		V8_TARGETS=(v8_monolith)
		;;
esac
case "$CONFIG" in
	debug)
		GN_ARGS+=(
			symbol_level=2
			v8_enable_slow_dchecks=true
			v8_optimized_debug=false
		)
		;;
	optdebug)
		GN_ARGS+=(
			symbol_level=1
			v8_enable_verify_heap=true
			v8_optimized_debug=true
		)
		;;
esac

# Configure gn / ninja
echo gn gen "$OUTDIR/$TARGET" --args=\'"${GN_ARGS[*]}"\'
gn gen "$OUTDIR/$TARGET" --args="${GN_ARGS[*]}"

# Make v8-gn.h
mkdir -p "$OUTDIR/$TARGET/include"
echo > "$OUTDIR/$TARGET/include/v8-gn.h" "#pragma once"
DEFINES=$(grep 'defines = ' "$OUTDIR/$TARGET/obj/v8_compiler.ninja" | grep -Eoi -- '-D[A-Z0-9_=]+\b' | cut -c3-)
USED_DEFINES=$(grep -REoh -- "$(echo -n "${DEFINES}" | sed -r 's/\\b([A-Z0-9_]+)=?.+\\b/\1/g' | tr '\n' '|')" include | sort | uniq)
echo "$DEFINES" | while read -r LINE; do
	# shellcheck disable=SC2206
	PAIR=(${LINE//=/ })
	FLAG=${PAIR[0]}
	VALUE=${PAIR[1]:-}
	if [[ "$USED_DEFINES" == *"$FLAG"* ]]; then
		if [[ "$VALUE" == '' ]]; then
			VALUE=1
		fi
		echo "#define $FLAG $VALUE" >> "$OUTDIR/$TARGET/include/v8-gn.h"
	fi
done

# Make `env`
cat <<EOF > "$OUTDIR/$TARGET/env"
V8_INCLUDE_GN_FILE=$(realpath "$OUTDIR/$TARGET/include/v8-gn.h")
V8_INCLUDE_DIR=$(realpath "$OUTDIR/include")
V8_LIBRARY_TYPE=$V8_LIBRARY_TYPE
V8_OUT_PATH=$(realpath "$OUTDIR/$TARGET")
EOF

# Build the monolith
ninja -C "$OUTDIR/$TARGET" v8 "${V8_TARGETS[@]}"
